import {
  reqAdminAuthRegister,
  reqAdminQuizCreate,
  reqClear,
  reqLLMGetQuestion
} from '../helperFile/serverRequests';
import { v4 as uuidv4 } from 'uuid';

let session: string;
let quizId: number;
let session2: string;
beforeEach(() => {
  reqClear();

  const res = reqAdminAuthRegister(
    'valid@email.com',
    'validPass1',
    'validFirstName',
    'validLastName'
  );
  session = (res.body as { session: string }).session;

  const quizRes = reqAdminQuizCreate(session, 'valid name', 'valid description');
  quizId = (quizRes.body as { quizId: number }).quizId;

  const res2 = reqAdminAuthRegister(
    'valid2@email.com',
    'validPass2',
    'validFirst',
    'validLast'
  );
  session2 = (res2.body as { session: string }).session;
});

describe('adminQuizLLMSuggested', () => {
  describe('Error cases', () => {
    test.each([
      {
        name: 'Invalid session',
        session: () => uuidv4(),
        quizId: () => quizId,
        errorCode: 401
      },
      {
        name: 'Empty session',
        session: () => '',
        quizId: () => quizId,
        errorCode: 401
      },
      {
        name: 'Invalid quizId',
        session: () => session,
        quizId: () => quizId + 1,
        errorCode: 403
      },
      {
        name: 'QuizId does not correspond to an user',
        session: () => session2,
        quizId: () => quizId,
        errorCode: 403
      },
    ])('$name', ({ session, quizId, errorCode }) => {
      const res = reqLLMGetQuestion(quizId(), session());
      expect(res.body).toStrictEqual({ error: expect.any(String) });
      expect(res.statusCode).toStrictEqual(errorCode);
    });
  });

  describe('Successive case', () => {
    test('Question successfully generated by LLM', () => {
      const res = reqLLMGetQuestion(quizId, session);
      expect(res.body).toStrictEqual({ question: expect.any(String) });
    });
  });
});
